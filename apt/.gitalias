# Destroyed a commit by accident ?
# git reflog
# git checkout -b someNewBranchName shaYouDestroyed
# You have 90 days

[alias]
  a = add -A
  s = status
  c = commit -m
  p = push
  cp = cherry-pick

  # get master/main branch name
  main-branch = !"git branch -l main master --format '%(refname:short)' | head -n 1"

  # describe alias
  type = !"f() { git config --list | grep alias | grep $1; } ; f"

  # clone one tag
  clone-tag = !"f() { git clone --depth 1 --branch $2 $1 ; }; f"

  # clone last commit only
  clone-d1 = "clone --depth 1"

  # clone recursive submodules
  clone-rec = "clone --recurse-submodule"

  # first push
  push-first = !"git push -u origin $(git rev-parse --abbrev-ref HEAD)"
  pushf = push-first

  pull-stash = !"git stash && git pull && git stash pop"
  pullst = pull-stash
  pull-main = !"git co $(git main-branch) && git pull && git co -" 
  pullm = pull-main

  # list files not used by this git
  others = "ls-files --others --ignored --exclude-from=.gitignore"
  # count lines
  count-lines = !"git ls-files -z | xargs -0 wc -l"

  # removes last commit - ready to commit again
  uncommit = "reset --soft HEAD~1"
  # removes last commit - need to add again before commit
  undo = "reset HEAD~1"

  # rename branch
  rename = branch -m
  rename-origin = !"f() { git branch -m $1 $2 && git push origin -m $2 && git push origin --delete $1; } ; f"

  # checkout
  co = checkout
  new = checkout -b

  # stash list
  stl = !"git stash list | cat"
  # stash diff
  std = !"f() { git stash show stash@{${1:-0}} --patch; } ; f"
  # stash commit
  stc = "stash store -m"
  # stash apply
  st-apply = !"f() { git stash apply stash@{${1:-0}}; } ; f"
  # stash push / git pull / stash pop
  stp = !"git stash ; git pull ; git stash pop"

  # colored log
  log-color = log --color=always
  # list all commits in one line - scrollable
  la = !"git log-color --decorate --date=short --pretty=format:'%C(yellow)%H %C(green)%ad%C(red)%d %C(reset)%s %C(blue)[%cn]%C(reset)'"
  list-all = la
  # print last 20 commits in one line
  l = !"git la -20 | cat && echo"
  list = l
  # print last 20 commits graph
  lg = !"git log-color -20 --oneline --graph --format='%C(auto)%h%d %s %C(black)%C(green)%cr %C(blue)[%cn]%C(reset)'| cat"
  list-graph = lg
  # print last 10 commits graph detailed
  ls = !"git log-color -10 --graph --stat | cat"
  # print last commit details
  last = !"git log-color -1 HEAD --stat | cat"
  # print all commits details from origin
  lo = !"git log-color origin/HEAD..HEAD --stat | cat"
  list-from-origin = lo

  # print name of current branch
  bp = !"echo $(git rev-parse --abbrev-ref HEAD)"
  # list branches sorted by last modified
  b = !"git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
  br = !"git branch | cat"
  bra = !"git branch -a | cat"

  # diff
  d = !"f() { git diff $@ | if [ -x \"$(command -v bat)\" ]; then bat -l patch; else cat; fi; } ; f"
  ds = !"git d --staged"
  diff-staged = ds
  dc = !"git d --cached"
  diff-cached = dc
  dom = !"git d @ origin/$(git main-branch)"

  # diff word
  dw = !"git d --color-words"
  diff-word = dw
  dws = !"git d --staged --color-words"
  diff-word-staged = dws
  dwc = !"git d --cached --color-words"
  diff-word-cached = dwc

  # diff now
  dn = !"git d HEAD"
  diff-now = dn

  # diff last commit
  dl = !"git show | if [ -x \"$(command -v bat)\" ]; then bat -l patch; else cat; fi;"
  diff-last = dl

  # diff tool
  dv = difftool -t vimdiff -y
  diff-view = dv

  # grep
  grep = grep -Ii

  # skip
  skip = update-index --skip-worktree
  ignore = skip

  # interactive scripts

  diff-interactive = !"bash $HOME/.git.d/git-interactive-diff.sh"
  di = diff-interactive

  select-branch = !"git checkout \"$(bash $HOME/.git.d/git-interactive-select-branch.sh)\""
  sb = select-branch

  select-commit = !"git checkout \"$(bash $HOME/.git.d/git-interactive-select-commit.sh)\""
  sc = select-commit

  select-tag = !"git checkout \"$(bash $HOME/.git.d/git-interactive-select-tags.sh)\""
  st = select-tag

  # check if commit1 is older than commit2
  is-older-than = !"f() { \
    if git merge-base --is-ancestor "$1" "$2" 2>/dev/null; then \
      echo 'true'; return 0; \
    elif git merge-base --is-ancestor "$2" "$1" 2>/dev/null; then \
      echo 'false - it is more recent'; return 1; \
    else \
      echo 'none - the commits are not related'; return 2; \
    fi; \
  }; f"

  # print help
  h = !"printf 'List of bindings:\\n \
    CTRL-G + F for Files\\n \
    CTRL-G + B for Branches\\n \
    CTRL-G + T for Tags\\n \
    CTRL-G + R for Remotes\\n \
    CTRL-G + H for commit Hashes\\n \
    CTRL-G + S for Stashes\\n \
    CTRL-G + L for reflogs\\n \
    CTRL-G + W for Worktrees\\n \
    CTRL-G + E for Each ref (git for-each-ref)\\n' \
"